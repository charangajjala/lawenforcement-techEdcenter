"""
Django settings for xbackend project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""


from pathlib import Path
import os
import io
from datetime import timedelta
from google.cloud import secretmanager
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Used to link pytest to manage.py test
TEST_RUNNER = 'xbackend.testrunner.PytestTestRunner'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jl$(0r6lq4@k(d)6!!pz&d-3x7r&*lg*hvlv=-0^&s!i%15j4#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ADMIN_ENABLED = False
AUTH_USER_MODEL = 'users.User'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',

    'corsheaders',
    'django_tex',

    'meta.apps.MetaConfig',
    'classes.apps.ClassesConfig',
    'users.apps.UsersConfig',
    'courses.apps.CoursesConfig',
    'instructors.apps.InstructorsConfig',
    'hosts.apps.HostsConfig',
    'students.apps.StudentsConfig',
    'hours.apps.HoursConfig',
    'promos.apps.PromosConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # new
    'django.middleware.common.CommonMiddleware', # new
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
#    'django.middleware.common.CommonMiddleware',
#    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'xbackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    {
        'NAME': 'tex',
        'DIRS': [BASE_DIR/'templates'],
        'BACKEND': 'django_tex.engine.TeXEngine', 
        'APP_DIRS': True,
    },
    
]

LATEX_INTERPRETER = 'pdflatex'

#WSGI_APPLICATION = 'xbackend.wsgi.application'


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # 'EXCEPTION_HANDLER': 'users.utils.custom_exception_handler',
    'DEFAULT_PERMISSION_CLASSES': [
#        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.MultiPartRenderer',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=50),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS512',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# [START db_setup]
if os.getenv('GAE_APPLICATION', None):
   # Running on production App Engine, so connect to Google Cloud SQL using
   # the unix socket at /cloudsql/<your-cloudsql-connection string>
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.postgresql',
           'HOST': '/cloudsql/web-app-289602:us-east1:xdatabase',
           'NAME': 'postgres',
           'USER': 'postgres',
           'PASSWORD': 'cevuKJ5OmM9uvDel',
       }
   }

   CORS_ORIGIN_WHITELIST = [
       'https://policetechnical.com'
   ]
else:
    # Running locally so connect to either a local MySQL instance or connect
    # to Cloud SQL via the proxy.  To start the proxy via command line:
    #    $ cloud_sql_proxy -instances=[INSTANCE_CONNECTION_NAME]=tcp:3306
    # See https://cloud.google.com/sql/docs/mysql-connect-proxy
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': '127.0.0.1',
            'PORT': '5432',
            'NAME': 'xdb',
            'USER': 'dbuser',
            'PASSWORD': 'YRAgop3b!',
        }
    }

# env = environ.Env(DEBUG=(bool, False))
# env_file = os.path.join(BASE_DIR, ".env")

# if os.path.isfile(env_file):
#     # Use a local secret file, if provided

#     env.read_env(env_file)
# # ...
# elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
#     # Pull secrets from Secret Manager
#     project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")

#     client = secretmanager.SecretManagerServiceClient()
#     settings_name = os.environ.get("SETTINGS_NAME", "xbackend_settings")
#     name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
#     payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")

#     env.read_env(io.StringIO(payload))
# else:
#     raise Exception("No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")
#     # Use django-environ to parse the connection string

# DATABASES = {"default": env.db()}

# # If the flag as been set, configure to use proxy
# if os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None):
#     DATABASES["default"]["HOST"] = "127.0.0.1"
#     DATABASES["default"]["PORT"] = 5432

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'HOST': '/cloudsql/web-app-289602:us-central1:xdb',
#         'NAME': 'xdb',
#         'USER': 'dbuser',
#         'PASSWORD': 'YRAgop3b!',
#     }
# }
# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CORS_ALLOW_ALL_ORIGINS = True
#CORS_ORIGIN_WHITELIST = [
#    'http://localhost:3000','http://localhost:3001'
#]
CORS_ORIGIN_WHITELIST = [
    'https://everydaysoftwares.com', 'https://admin.everydaysoftwares.com'
]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'jampuramprem01@gmail.com'
EMAIL_HOST_PASSWORD = 'zckrjokvbylbddba'
EMAIL_PORT = 587

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR/"static"]
STATIC_ROOT = BASE_DIR/"staticfiles"

#MEDIA_ROOT = BASE_DIR/"static/images"
#MEDIA_URL = "/images/"
